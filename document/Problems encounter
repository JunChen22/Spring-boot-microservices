problems
Maven related
- the multi module project error with packaging as whole project.
  - submodule like api and util can package itself fine but doesn't connect to product    	  service
  - "Unable to find main class" in api and util module
- error with changing artifact
https://www.youtube.com/watch?v=KNGQ9JBQWhQ

solution:
	submodule need to add "<relative path >" reference to the parent pom


Problems I encountered Q and A

- more configuration error rather than coding problem
- Gradle to maven conversion
- Pom multi module project ordering
- docker can't build when persistence is added, needs to have database running to build
  . needs to have embedded database(H2 for RSDB , and flap-doodle for no sql) for testing to build
 A: can do mvn clean package -DskipTests to skip the test or use embed database to do the test
- Embedded/in-memory MongoDB,Plapdoodle doesn't work with certain version of Spring boot. Spring boot 2.5 and later need to check documentation.
  will cause mongo template error.(Use Testcontainers instead now) Plapdoodle is not MongoDB official , so it's not exact

need a centralized place to store version of each dependency in maven
- pom property is where to put version number


Mapstruct error with IntelliJ
- version 1.3.1 final don't work with IntelliJ
  There are several intellij bugs here. If I change the maven version 1.3.0.Final to 1.4.1.Final the intellij don't want to update the version.
-
might have issues with persistence testing scope in pom.xml



the unit test the book provide doesn't really work with intelliJ
- mapstruct error version 1.3.1 and intelliJ conflict
- mapstruct setup processorPath error
- java version 1.8 or above
- gradle and maven difference


no H2 Test containers is not as performant as H2, but does give you the benefit of 100% database compatibility







getting "Could not find class [org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration]" output
A: missing actuator dependency. need it for health check


circular loop with ProductIntegration auto-wired with health check bean
A: moved the health check bean into productIntegration class instead in application class




mapstruct and lombok doesn't work together
A: Maven only uses map struct processor and not lombok. need to change
   something in the annotationProcessorPaths
https://stackoverflow.com/questions/47676369/mapstruct-and-lombok-not-working-together


test container import scope warning
https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
https://github.com/testcontainers/testcontainers-java-spring-boot-quickstart/blob/main/pom.xml


intelliJ: java outside of source root problem. IntelliJ don't auto import.
A: One way to do this afterwards is to right-click on the pom.xml file in the root directory,
and select 'Add as maven project'.
Then the folders will be marked correctly, and dependent libraries will be imported.
There should be no need to mark individual source folders manually.
https://stackoverflow.com/questions/63521181/java-file-outside-of-source-root-intellij



Messaging test failure in product-composite service.
A: Caused by not enough threads in thread pool allocated. all those test are synchronous requests and it takes a thread each
   and default thread pool is 10 and I set it to 2 and it caused messaging test error/failure

random services evict from eureka server when running test script
A: error code 137, not enough memory, but i set it to 512mb still not enough...
    docker stats
    core services memory usage average 95%+ and that's at 512mb
    it service will crash after I ran the test script after discovery service is added. 800mb won't work
    set it to 1024mb it barely works at 99% memory usage in some services.

It seems like changing from JDK 11 jre to JDK 16 lower the memory usage from 900mb to closer to 300mb
from adoptopenjdk:11-jre-hotspot to adoptopenjdk:16_36-jre-hotspot

Docker-compose hung up and no out put all services are up except for core services.
A: those services can only start when it's depended services are up and reported healthy.
   depending on the version of the image, the health check command won't work and won't report
   healthy so the core services will just hung there. For example, I changed mongodb image
   version from 4.x.x to latest version (6.x.x) and it just hung there because mongodb container
   only report "health:starting"" when it needed "healthy". And it would take approximately 40 seconds
   for rabbitMQ to get it ready and report healthy


TODO: look into this further
can build but can't start gateway container with SSL certificate e.g. edge.p12
when gateway container start it exit 1 with "Could not load key store 'classpath:keystore/edge.p12" error.
A: it doesn't work wit the JDK 11 image I used it to build the container. It worked with it's JDK 16

SSL certificate related problems might be password incorrect when creating it.
It needs to match to the one provided to gateway application.yml file.

creating SSL certificate command.
$ keytool -genkeypair -alias localhost -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore edge.p12 -validity 3650


maven package failed with 2 minute plus at a single module could be util or product-composite module.
A: poor internet connection can cause maven to be unable to get the dependencies it needs in a timely fashion.
   It will stop the build process and return error.
   I got these error when there's outage in my area from my ISP. On PC it builds fine but won't work on laptop and
   raspberry pi. It should build fine in github action.


spring cloud config server version and java version compatibility error
4.0.0 doesnt work will have error code like


spring boot version not compatible with spring cloud release train
2.6.2 not working need 2.4.x or 2.5.x versions
https://spring.io/projects/spring-cloud



springdoc version need to be the same. API package and product-compose



com.netflix.discovery.shared.resolver.EurekaEndpoint
caused by different eureka version. one is starter one is not.





could not get core services to work with spring cloud config.

it constant giving error.
- it doesn't build or pass the unit test.
- it works in gradle but not maven.
- it works with removed the spring.config.import: "configserver:"
- but when it's removed it doesn't run on docker
TODO: still doesn't run on locally
A: fixed with multi profile setup.


encrypt and decrypt endpoint in spring cloud config server not exist/no output.
GatewayMetricsFilter      : spring.cloud.gateway.requests tags: [tag(httpMethod=POST),tag(httpStatusCode=401),tag(outcome=CLIENT_ERROR),tag(routeId=config-server),tag(routeUri=http://config-server:8888),tag(status=UNAUTHORIZED)]
A: I messed up the ConfigserverApplication name in the main application.
   instead of SpringApplication.run(ConfigserverApplication.class, args);

   I put SpringApplication.run(ConfigServerApplication.class, args);

   and that is by spring cloud import org.springframework.cloud.config.server.ConfigServerApplication;

   so it was running their program and not mine. I don't have control over it.
   it was just one letter off and I used alt + enter in intelliJ and imported wrong dependency.

   It should work when encrypt.key is introduced in application.yml file




Spring boot and Spring cloud release train incompatible
A: Spring cloud only support specific version of Spring boot.
   and add
            <dependency>
   				<groupId>org.springframework.cloud</groupId>
   				<artifactId>spring-cloud-dependencies</artifactId>
   				<version>${spring.cloud-version}</version>
   				<type>pom</type>
   				<scope>import</scope>
   			</dependency>
    for easier change of java version and spring boot version.
    it will change all the children's dependency version.

check for supported version https://spring.io/projects/spring-cloud#overview



oauth2 server dependency version will cause error if version not right.
        <dependency>
			<groupId>org.springframework.security.experimental</groupId>
			<artifactId>spring-security-oauth2-authorization-server</artifactId>
			<version>0.1.0</version>
		</dependency>
version 2 and 3 is very different than the experimental version.





============================= kubernetes

http://auth-server:9999 changes to just http://auth-server without port number when deploying in kubernetes. (centralized config easy to change port)

problem: now it runs but isn't working
// couldn't get the config file

